{"version":3,"sources":["webpack://react-template/./app/components/Clickable/index.js","webpack://react-template/./app/containers/HomeContainer/selectors.js","webpack://react-template/./app/utils/index.js","webpack://react-template/./app/utils/apiUtils.js","webpack://react-template/./app/services/repoApi.js","webpack://react-template/./app/containers/HomeContainer/saga.js","webpack://react-template/./app/containers/HomeContainer/index.js"],"names":["StyledClickable","styled","onClick","textId","data-testid","T","id","selectHomeContainerDomain","state","homeContainer","initialState","selectHomeContainer","createSelector","substate","mapKeysDeep","obj","fn","Array","isArray","map","val","Object","keys","reduce","acc","current","key","apiClients","github","default","createApiClientWithTransForm","baseURL","api","create","headers","addResponseTransform","response","ok","data","camelCase","addRequestTransform","request","snakeCase","repoApi","type","process","generateApiClient","getRepos","repoName","get","getGithubRepos","homeContainerSaga","REQUEST_GET_GITHUB_REPOS","homeContainerTypes","successGetGithubRepos","homeContainerCreators","failureGetGithubRepos","action","call","put","takeLatest","Search","CustomCard","props","maxwidth","color","Container","padding","RightContent","HomeContainer","dispatchGithubRepos","dispatchClearGithubRepos","intl","reposData","reposError","useState","loading","setLoading","useEffect","loaded","items","length","repoError","totalCount","history","useHistory","debouncedHandleOnChange","debounce","rName","isEmpty","push","window","location","reload","title","formatMessage","marginBottom","defaultValue","onChange","evt","target","value","onSearch","searchText","active","values","item","index","name","fullName","stars","stargazersCount","defaultProps","mapStateToProps","createStructuredSelector","withConnect","connect","dispatch","requestGetGithubRepos","clearGithubRepos","compose","injectIntl","memo","injectSaga","saga","HomeContainerTest"],"mappings":"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","file":"160.60a0eedfd0da78e9e960.chunk.js","sourcesContent":["/**\n *\n * Clickable\n *\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport T from '@components/T';\n\nconst StyledClickable = styled.div`\n  color: #1890ff;\n  &:hover {\n    cursor: pointer;\n  }\n`;\nexport function Clickable({ onClick, textId }) {\n  return (\n    <StyledClickable data-testid=\"clickable\" onClick={onClick}>\n      {textId && <T id={textId} />}\n    </StyledClickable>\n  );\n}\n\nClickable.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  textId: PropTypes.string.isRequired\n};\n\nexport default Clickable;\n","import { createSelector } from 'reselect';\nimport get from 'lodash/get';\nimport { initialState } from './reducer';\n\n/**\n * Direct selector to the homeContainer state domain\n */\n\nconst selectHomeContainerDomain = (state) => state.homeContainer || initialState;\n\n/**\n * Other specific selectors\n */\n\n/**\n * Default selector used by HomeContainer\n */\n\nexport const selectHomeContainer = () => createSelector(selectHomeContainerDomain, (substate) => substate);\n\nexport const selectReposData = () =>\n  createSelector(selectHomeContainerDomain, (substate) => get(substate, 'reposData'));\n\nexport const selectReposError = () =>\n  createSelector(selectHomeContainerDomain, (substate) => get(substate, 'reposError'));\n\nexport const selectRepoName = () => createSelector(selectHomeContainerDomain, (substate) => get(substate, 'repoName'));\nexport default selectHomeContainer;\n","import find from 'lodash/find';\nimport get from 'lodash/get';\nimport routeConstants from './routeConstants';\n\n/**\n * Get details of the current route from the route config.\n * If location.pathname doesn't match any entry in the routeConstants it will return null\n * @author mac\n * @date 2020-05-07\n * @param {any} location\n * @returns {any}\n */\nexport const getCurrentRouteDetails = (location) => {\n  if (!get(location, 'pathname')) {\n    return null;\n  }\n  const route = find(\n    Object.keys(routeConstants),\n    (key) => routeConstants[key].route === location.pathname || `${routeConstants[key].route}/` === location.pathname\n  );\n  if (route) {\n    return routeConstants[route];\n  }\n  return null;\n};\nexport const mapKeysDeep = (obj, fn) =>\n  Array.isArray(obj)\n    ? obj.map((val) => mapKeysDeep(val, fn))\n    : typeof obj === 'object'\n    ? Object.keys(obj).reduce((acc, current) => {\n        const key = fn(current);\n        const val = obj[current];\n        acc[key] = val !== null && typeof val === 'object' ? mapKeysDeep(val, fn) : val;\n        return acc;\n      }, {})\n    : obj;\n\nexport const isLocal = () => {\n  try {\n    if (JSON.parse(process.env.IS_LOCAL)) {\n      return true;\n    }\n  } catch {\n    // continue regardless of error\n  }\n  return false;\n};\n","import { create } from 'apisauce';\nimport snakeCase from 'lodash/snakeCase';\nimport camelCase from 'lodash/camelCase';\nimport { mapKeysDeep } from './index';\n\nconst apiClients = {\n  github: null,\n  default: null\n};\nexport const getApiClient = (type = 'github') => apiClients[type];\nexport const generateApiClient = (type = 'github') => {\n  switch (type) {\n    case 'github':\n      apiClients[type] = createApiClientWithTransForm(process.env.GITHUB_URL);\n      return apiClients[type];\n    default:\n      apiClients.default = createApiClientWithTransForm(process.env.GITHUB_URL);\n      return apiClients.default;\n  }\n};\n\nexport const createApiClientWithTransForm = (baseURL) => {\n  const api = create({\n    baseURL,\n    headers: { 'Content-Type': 'application/json' }\n  });\n  api.addResponseTransform((response) => {\n    const { ok, data } = response;\n    if (ok && data) {\n      response.data = mapKeysDeep(data, (keys) => camelCase(keys));\n    }\n    return response;\n  });\n\n  api.addRequestTransform((request) => {\n    const { data } = request;\n    if (data) {\n      request.data = mapKeysDeep(data, (keys) => snakeCase(keys));\n    }\n    return request;\n  });\n  return api;\n};\n","import { generateApiClient } from '@utils/apiUtils';\nconst repoApi = generateApiClient('github');\n\nexport const getRepos = (repoName) => repoApi.get(`/search/repositories?q=${repoName}`);\n","import { put, call, takeLatest } from 'redux-saga/effects';\nimport { getRepos } from '@services/repoApi';\nimport { homeContainerTypes, homeContainerCreators } from './reducer';\n\nconst { REQUEST_GET_GITHUB_REPOS } = homeContainerTypes;\nconst { successGetGithubRepos, failureGetGithubRepos } = homeContainerCreators;\nexport function* getGithubRepos(action) {\n  const response = yield call(getRepos, action.repoName);\n  const { data, ok } = response;\n  if (ok) {\n    yield put(successGetGithubRepos(data));\n  } else {\n    yield put(failureGetGithubRepos(data));\n  }\n}\n// Individual exports for testing\nexport default function* homeContainerSaga() {\n  yield takeLatest(REQUEST_GET_GITHUB_REPOS, getGithubRepos);\n}\n","import React, { useEffect, memo, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { compose } from 'redux';\nimport get from 'lodash/get';\nimport debounce from 'lodash/debounce';\nimport isEmpty from 'lodash/isEmpty';\nimport { Card, Skeleton, Input } from 'antd';\nimport styled from 'styled-components';\nimport { injectIntl } from 'react-intl';\nimport { useHistory } from 'react-router-dom';\nimport T from '@components/T';\nimport Clickable from '@components/Clickable';\nimport { injectSaga } from 'redux-injectors';\nimport { selectHomeContainer, selectReposData, selectReposError, selectRepoName } from './selectors';\nimport { homeContainerCreators } from './reducer';\nimport homeContainerSaga from './saga';\n\nconst { Search } = Input;\n\nconst CustomCard = styled(Card)`\n  && {\n    margin: 20px 0;\n    max-width: ${(props) => props.maxwidth};\n    color: ${(props) => props.color};\n    ${(props) => props.color && `color: ${props.color}`};\n  }\n`;\nconst Container = styled.div`\n  && {\n    display: flex;\n    flex-direction: column;\n    max-width: ${(props) => props.maxwidth}px;\n    width: 100%;\n    margin: 0 auto;\n    padding: ${(props) => props.padding}px;\n  }\n`;\nconst RightContent = styled.div`\n  display: flex;\n  align-self: flex-end;\n`;\nexport function HomeContainer({\n  dispatchGithubRepos,\n  dispatchClearGithubRepos,\n  intl,\n  reposData,\n  reposError,\n  repoName,\n  maxwidth,\n  padding\n}) {\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    const loaded = get(reposData, 'items', null) || reposError;\n    if (loading && loaded) {\n      setLoading(false);\n    }\n  }, [reposData]);\n\n  useEffect(() => {\n    if (repoName && !reposData?.items?.length) {\n      dispatchGithubRepos(repoName);\n      setLoading(true);\n    }\n  }, []);\n\n  const history = useHistory();\n\n  const handleOnChange = (rName) => {\n    if (!isEmpty(rName)) {\n      dispatchGithubRepos(rName);\n      setLoading(true);\n    } else {\n      dispatchClearGithubRepos();\n    }\n  };\n  const debouncedHandleOnChange = debounce(handleOnChange, 200);\n\n  const renderRepoList = () => {\n    const items = get(reposData, 'items', []);\n    const totalCount = get(reposData, 'totalCount', 0);\n    return (\n      (items.length !== 0 || loading) && (\n        <CustomCard>\n          <Skeleton loading={loading} active>\n            {repoName && (\n              <div>\n                <T id=\"search_query\" values={{ repoName }} />\n              </div>\n            )}\n            {totalCount !== 0 && (\n              <div>\n                <T id=\"matching_repos\" values={{ totalCount }} />\n              </div>\n            )}\n            {items.map((item, index) => (\n              <CustomCard key={index}>\n                <T id=\"repository_name\" values={{ name: item.name }} />\n                <T id=\"repository_full_name\" values={{ fullName: item.fullName }} />\n                <T id=\"repository_stars\" values={{ stars: item.stargazersCount }} />\n              </CustomCard>\n            ))}\n          </Skeleton>\n        </CustomCard>\n      )\n    );\n  };\n  const renderErrorState = () => {\n    let repoError;\n    if (reposError) {\n      repoError = reposError;\n    } else if (!get(reposData, 'totalCount', 0)) {\n      repoError = 'respo_search_default';\n    }\n    return (\n      !loading &&\n      repoError && (\n        <CustomCard color={reposError ? 'red' : 'grey'} title={intl.formatMessage({ id: 'repo_list' })}>\n          <T id={repoError} />\n        </CustomCard>\n      )\n    );\n  };\n  const refreshPage = () => {\n    history.push('stories');\n    window.location.reload();\n  };\n  return (\n    <Container maxwidth={maxwidth} padding={padding}>\n      <RightContent>\n        <Clickable textId=\"stories\" onClick={refreshPage} />\n      </RightContent>\n      <CustomCard title={intl.formatMessage({ id: 'repo_search' })} maxwidth={maxwidth}>\n        <T marginBottom={10} id=\"get_repo_details\" />\n        <Search\n          data-testid=\"search-bar\"\n          defaultValue={repoName}\n          type=\"text\"\n          onChange={(evt) => debouncedHandleOnChange(evt.target.value)}\n          onSearch={(searchText) => debouncedHandleOnChange(searchText)}\n        />\n      </CustomCard>\n      {renderRepoList()}\n      {renderErrorState()}\n    </Container>\n  );\n}\n\nHomeContainer.propTypes = {\n  dispatchGithubRepos: PropTypes.func,\n  dispatchClearGithubRepos: PropTypes.func,\n  intl: PropTypes.object,\n  reposData: PropTypes.shape({\n    totalCount: PropTypes.number,\n    incompleteResults: PropTypes.bool,\n    items: PropTypes.array\n  }),\n  reposError: PropTypes.object,\n  repoName: PropTypes.string,\n  history: PropTypes.object,\n  maxwidth: PropTypes.number,\n  padding: PropTypes.number\n};\n\nHomeContainer.defaultProps = {\n  maxwidth: 500,\n  padding: 20,\n  reposData: {},\n  reposError: null\n};\n\nconst mapStateToProps = createStructuredSelector({\n  homeContainer: selectHomeContainer(),\n  reposData: selectReposData(),\n  reposError: selectReposError(),\n  repoName: selectRepoName()\n});\n\nfunction mapDispatchToProps(dispatch) {\n  const { requestGetGithubRepos, clearGithubRepos } = homeContainerCreators;\n  return {\n    dispatchGithubRepos: (repoName) => dispatch(requestGetGithubRepos(repoName)),\n    dispatchClearGithubRepos: () => dispatch(clearGithubRepos())\n  };\n}\n\nconst withConnect = connect(mapStateToProps, mapDispatchToProps);\n\nexport default compose(\n  injectIntl,\n  withConnect,\n  memo,\n  injectSaga({ key: 'homeContainer', saga: homeContainerSaga })\n)(HomeContainer);\n\nexport const HomeContainerTest = compose(injectIntl)(HomeContainer);\n"],"sourceRoot":""}